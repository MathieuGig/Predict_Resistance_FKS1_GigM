Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
Recall(n, m %% n)
}
PPCM(2,4)
PGCD <- function(m,n)
{
if (n == 0) return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
(m*n)/Recall(m,n)
}
PPCM(2,4)
PGCD <- function(m,n)
{
if (n == 0) return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
(m*n)/PGCD(m,n)
}
PPCM(2,4)
PPCM(0,4)
PPCM(1,4)
PPCM(14,7)
PGCD <- function(m,n)
{
if (n == 0)
return(m)
Recall(n, m %% n)
}
PPCM <- function(m,n)
{
if (m == 0 | n == 0)
return(0)
if (n == 1 | m == 1)
return(max(c(m,n)))
if (m == n)
return(m)
(m*n)/PGCD(m,n)
}
PPCM(14,7)
seq(0)
seq(0,6)
seq(6,0)
rep(c(0.6), times = 3)
rep(c(0,6), times = 3)
seq(1,10, by =3)
seq(1,10, by = 3)
rep(c(1,2,3), times = 4)
rep(c(1,2,3) times = c(1,2,3))
rep(c(1,2,3))
rep(c(1,2,3), times = x)
rep(c(1,2,3), times = c(1,2,3))
rep(c(1,2,3), times = c(3,2,1))
seq(1,10, by =4.5)
rep(c(1,2,3), times = 4)
rep(c(1,2,3), times = c(4,4,4)
rep(c(1,2,3), times = c(4,4,4))
rep(c(1,2,3), times = c(4,4,4))
#4.13
rep(1.1+0.1, times = 9)
#4.13
rep(1.1+0.1, times = 1:9)
#4.13
rep(1.1+0.1:0.9, times = 9)
#4.13
rep(1.1+0.1:0.9)
#4.13
rep(1.1+ c(0.1, 0.2)
#4.13
rep(1.1+ c(0.1, 0.2))
#4.13
rep(1.1+ c(0.1, 0.2))
#4.13
rep(1.1+ c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), times = 9)
#4.13
rep(1.1+ c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), times = 1)
#4.13
11:20/10
rep(1:20/2)
unlist(lapply(0:10, seq, from = 0))
unlist(lapply(0:2, seq, from = 0))
unlist(lapply(0:5, seq, from = 0))
rpareto <- function(n, shape, scale) scale * (runif(n)^(-1/shape) - 1)
echantillons <- lapply(seq(100, 300, by = 50), rpareto, shape = 2, scale = 5000)
names(echantillons) <- paste("sample", 1:5, sep = "")
names(echantillons) <- paste("sample", 1:5, sep = " ")
sapply(echantillons, mean)
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_2021-",c(01:012),"u.csv", sep = "")
paths
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
for (i in paths)
{
TableauDeDonnées <- rbind(TableauDeDonnées, read.csv(i, colClasses = c(start_date = "Date")))
#voir read.bixi pour le read.csv
#read.bixi(i)
}
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
for (i in paths)
{
TableauDeDonnées <- rbind(TableauDeDonnées, read.csv(i, colClasses = c(start_date = "Date")))
#voir read.bixi pour le read.csv
#read.bixi(i)
}
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
View(TableauDeDonnées)
dates <- as.Date(c("2021-06-22", "2021-07-22", "2021-08-22"))
paths <- paste("C:/Users/User/Desktop/IFT-4902/travail-longitudinal/OD_",substr(dates,1,7),"u.csv", sep = "")
TableauDeDonnées <- data.frame()
for (i in paths)
{
TableauDeDonnées <- rbind(TableauDeDonnées, read.csv(i, colClasses = c(start_date = "Date")))
#voir read.bixi pour le read.csv
#read.bixi(i)
}
View(TableauDeDonnées)
TableauDeDonnées$duration_sec[grep("77", TableauDeDonnées$emplacement_pk_start)]
TableauDeDonnées$duration_sec[grep("10", TableauDeDonnées$emplacement_pk_start)]
#2
read.csv("C:/Users/User/Documents/IFT-4902/atelier4/bateau_extrait.csv")
#2
read.table("C:/Users/User/Documents/IFT-4902/atelier4/bateau_extrait.csv")
#2
read.delim("C:/Users/User/Documents/IFT-4902/atelier4/bateau_extrait.csv")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), x)
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), x)
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), read(x))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), read(x))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*"), readLines(x, encoding = "UFT-8"))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) (grep("##  Exemples*"), readLines(x, encoding = "UFT-8"))
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*", readLines(x, encoding = "UFT-8")))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo")
is.exemplesPresent <- function(x) as.logical(grep("##  Exemples*", readLines(x, encoding = "UFT-8")))
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/foo.R")
is.exemplesPresent("C:/Users/User/Documents/IFT-4902/atelier4/answer.R")
#11.8
x <- state.name
grep("ss",x)
x
#b)
x[grep("*s*s*s*",x)]
#b)
x[grep("s*s*s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+",x)]
#b)
x[grep("s{3}",x)]
#b)
x[grep("s"{3},x)]
#b)
x[grep("s+",x)]
#b)
x[grep("ss+",x)]
#b)
x[grep("ss+s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+",x)]
#b)
x[grep("s{3}",x)]
#c)
x[grep("..ss",x)]
#c)
x[grep(" ..ss",x)]
#c)
x[grep("?..ss",x)]
#c)
x[grep(""..ss",x)]
#c)
x[grep("[A-Z].ss",x)]
#b)
x[grep("s{3}",x)]
#b)
x[grep("sss",x)]
#b)
x[grep("s*s*s",x)]
#b)
x[grep("s+s*s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s",x)]
#b)
x[grep("s+s+s",x)]
#b)
x[grep("s+s+s+",x)]
#b)
x[grep("ss+s+",x)]
#b)
x[grep("s.*s.*s",x)]
#c)
x[grep("[A-Z].ss",x)]
#c)
subset(x[grep("[A-Z].ss",x)],4)
#c)
paste(x[grep("[A-Z].ss",x)], ".", sep = "")
#c)
paste(substr(x[grep("[A-Z].ss",x)],1,4), ".", sep = "")
#c)
paste(substr(x[grep("[A-Z].ss", x)], 1, 4), ".", sep = "")
x <- sample(1:100, 20 * 1e6, replace = TRUE)
write.csv(matrix(x, ncol = 20), file = "data.csv")
#niaiseries
cumsum(c(1,2,3))
#niaiseries
cumsum(c(1))
#niaiseries
cumsum(c(2*6))
#niaiseries
cumprod(c(2,3,4))
typeof(2)
typeof(c(2,3,4))
typeof(c(FALSE))
typeof("aaaa")
mode("aaaa")
mode(FALSE)
mode(c(2,3,4))
typeof(c(2,3,4))
mode(c(TRUE, "hello"))
mode(c(TRUE, "hello", 4))
typeof(c(TRUE,"hello", 4))
setwd("~/stageEte2023/orthologs")
###
### ExtractionHotspot(fichierAlignements)
###
##
## Find and extract hotspots 1 and 2 for each sequences of the FKS genes.
## Returns a data frame with the hotspot sequences, the species and their identifier
## and other informations.
##
##
## Arguments
##
## fichierAlignements: character string, the name of a *.aln file.
##
##
## Value
##
## A data frame of 8 columns describing the species, their identifier,
## the hotspots sequences of these species, the presence of gaps in the hotspots,
## and the presence of the hotspot in the oPools.
##
##
## Example
##
## ExtractionHotspot("FKS1_filtered.aln")
##
ExtractionHotspot <- function(fichierAlignements)
{
# Validation of the input file.
stopifnot("Invalid file for analysis. Require a *.aln file" = grepl(".aln", fichierAlignements))
# Read the file of filtered sequences.
SequencesFiltrees <- readLines(fichierAlignements)
# Extract and Format identifiers using des REGEX.
IdentifiantFormate <- gsub("\\|.*", "", grep(">", SequencesFiltrees, value = TRUE))
IdentifiantFormate <- gsub(" .*", "", IdentifiantFormate)
IdentifiantFormate <- gsub(">", "", IdentifiantFormate)
# Extract and Format the species using REGEX.
EspecesNonFormate <- gsub("^.*\\[", "", grep("\\[*\\]", SequencesFiltrees, value = TRUE))
EspecesFormate <- gsub("\\]", "", EspecesNonFormate)
# Create data frame.
Tableau <- data.frame(Identifier = IdentifiantFormate, Species = EspecesFormate)
# Create hotspot lists.
ListeHotspots1 <- list()
ListeHotspots2 <- list()
# Find the sequences corresponding to the Hotspots using their fixed positions.
# For each header line (so for each sequence)
for (i in grep(">", SequencesFiltrees))
{
# if FKS1
if (grepl("FKS1", fichierAlignements))
{
# Add to the Hotspot list the 8 or 9 amino acids at these fixed positions.
ListeHotspots1 <- append(ListeHotspots1, substr(SequencesFiltrees[i+17], start = 52, stop = 60))
ListeHotspots2 <- append(ListeHotspots2, substr(SequencesFiltrees[i+38], start = 1, stop = 8))
}
# if FKS2
else
{
# Add to the Hotspot list the 8 or 9 amino acids at these fixed positions.
# FKS2 Hotspot1 is 1 row farther and 1 aa smaller than the FKS1 Hotspot1.
# FKS2 Hotspot2 is farther on its line than the FKS1 Hotspot2.
ListeHotspots1 <- append(ListeHotspots1, substr(SequencesFiltrees[i+18], start = 52, stop = 59))
ListeHotspots2 <- append(ListeHotspots2, substr(SequencesFiltrees[i+38], start = 33, stop = 40))
}
}
# Add Hotspots columns to the data frame.
Tableau <- cbind(Tableau, Hotspot1 = unlist(ListeHotspots1))
Tableau <- cbind(Tableau, Hotspot2 = unlist(ListeHotspots2))
## Adding to the data frame columns indicating gaps in the hotspots
GapsHotspot1 <- grepl("-", Tableau$Hotspot1)
GapsHotspot2 <- grepl("-", Tableau$Hotspot2)
Tableau <- cbind(Tableau, GapsHotspot1)
Tableau <- cbind(Tableau, GapsHotspot2)
## Adding to the data frame columns indicating the presence of
## hotspots sequences in the oPools.
# Read the files carrying the sequences representing the oligos.
FKS1_Hotspots1_uniques <- (readLines("FKS1_HS1_orthologs_unique.fa"))[-1]
FKS1_Hotspots2_uniques <- (readLines("FKS1_HS2_orthologs_unique.fa"))[-1]
FKS2_Hotspots1_uniques <- (readLines("FKS2_HS1_orthologs_unique.fa"))[-1]
FKS2_Hotspots2_uniques <- (readLines("FKS2_HS2_orthologs_unique.fa"))[-1]
# Create lists
HS1oPools <- list()
HS2oPools <- list()
# if FKS1
if (grepl("FKS1", fichierAlignements))
{
# For each hotspot sequence in the data frame, verify its existence in
# the sequences used for the oligos, then add this logical value
# to a list.
for (i in Tableau$Hotspot1)
{
HS1oPools <- append(HS1oPools, i %in% FKS1_Hotspots1_uniques)
}
for (i in Tableau$Hotspot2)
{
HS2oPools <- append(HS2oPools, i %in% FKS1_Hotspots2_uniques)
}
}
# if FKS2
else
{
for (i in Tableau$Hotspot1)
{
HS1oPools <- append(HS1oPools, i %in% FKS2_Hotspots1_uniques)
}
for (i in Tableau$Hotspot2)
{
HS2oPools <- append(HS2oPools, i %in% FKS2_Hotspots2_uniques)
}
}
# Add columns to data frame.
Tableau <- cbind(Tableau, HS1_in_oPools = unlist(HS1oPools))
Tableau <- cbind(Tableau, HS2_in_oPools = unlist(HS2oPools))
# Return data frame.
Tableau
}
### Testing
TableauFKS1 <- ExtractionHotspot("FKS1_filtered.aln")
TableauFKS2 <- ExtractionHotspot("FKS2_filtered.aln")
View(TableauFKS1)
# Create file for NCBI Common Taxonomy Tree tool.
write(c(TableauFKS1$Species, TableauFKS2$Species), file = "allspecies.txt")
# Read NCBI Common Taxonomy Tree output.
MyTree <- readLines("NewTree.txt")
# Format the file so it can be properly used.
MyTreeFormate <- gsub("[|+-]", "", MyTree)
MyTreeFormate <- gsub("\\", "", MyTreeFormate, fixed = TRUE)
MyTreeFormate <- gsub("^ +", "", MyTreeFormate)
MyTreeFormate <- gsub("\\[", "", MyTreeFormate)
MyTreeFormate <- gsub("\\]", "", MyTreeFormate)
# Create list and add the species to it.
TaxoTree <- list(Fungi = list(Blastocladiomycota = MyTreeFormate[4], Basidiomycota = MyTreeFormate[6:17],
Ascomycota = MyTreeFormate[19:257],
Mucoromycota = MyTreeFormate[259:260] ),
Viridiplantae = list(Streptophyta = MyTreeFormate[263],
Chlorophyta = MyTreeFormate[265]))
# Specific cases.
TaxoTree$Fungi$Mucoromycota <- append(TaxoTree$Fungi$Mucoromycota, "Rhizopus oryzae")
TaxoTree$Fungi$Basidiomycota <- append(TaxoTree$Fungi$Basidiomycota, "Phanerochaete chrysosporium")
TaxoTree$Fungi$Basidiomycota <- append(TaxoTree$Fungi$Basidiomycota, "Melampsora larici-populina")
TaxoTree$Fungi$Basidiomycota <- append(TaxoTree$Fungi$Basidiomycota, "Melampsora laricipopulina")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Chaetomium thermophilum")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Candida glabrata")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Candida castellii")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Candida bracarensis")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Candida nivariensis")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Arthrobotrys oligospora")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Rutstroemia sp. NJR-2017a BBW")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Rutstroemia sp. NJR-2017a WRK4")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Marssonina brunnea")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Byssochlamys spectabilis")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Penicillium sp. 'occitanis'")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Talaromyces cellulolyticus")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Leptosphaeria maculans")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Pyrenophora tritici-repentis")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Acidomyces richmondensis")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Torrubiella hemipterigena")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Saccharomycetaceae sp. 'Ashbya aceri'")
TaxoTree$Fungi$Ascomycota <- append(TaxoTree$Fungi$Ascomycota, "Saccharomyces sp. 'boulardii'")
AddTaxonomy <- function(Vector_of_species, dataframe, TaxonomyTree = TaxoTree)
{
# Create vectors
Kingdom <- vector()
Phylum <- vector()
# Find the kingdom and phylum of every specie in the data.
for (i in Vector_of_species)
{
if (i %in% TaxonomyTree$Fungi$Blastocladiomycota)
{
Kingdom <- append(Kingdom, "Fungi")
Phylum <- append(Phylum, "Blastocladiomycota")
next
}
if (i %in% TaxonomyTree$Fungi$Basidiomycota)
{
Kingdom <- append(Kingdom, "Fungi")
Phylum <- append(Phylum, "Basidiomycota")
next
}
if (i %in% TaxonomyTree$Fungi$Ascomycota)
{
Kingdom <- append(Kingdom, "Fungi")
Phylum <- append(Phylum, "Ascomycota")
next
}
if (i %in% TaxonomyTree$Fungi$Mucoromycota)
{
Kingdom <- append(Kingdom, "Fungi")
Phylum <- append(Phylum, "Mucoromycota")
next
}
if (i %in% TaxonomyTree$Viridiplantae$Streptophyta)
{
Kingdom <- append(Kingdom, "Viridiplantae")
Phylum <- append(Phylum, "Streptophyta")
next
}
if (i %in% TaxonomyTree$Viridiplantae$Chlorophyta)
{
Kingdom <- append(Kingdom, "Viridiplantae")
Phylum <- append(Phylum, "Chlorophyta")
next
}
else
{
Kingdom <- append(Kingdom, "-")
Phylum <- append(Phylum, "-")
next
}
}
# Add to Kingdom and Phylum to FKS data frame.
dataframe <- cbind(dataframe, Kingdom)
dataframe <- cbind(dataframe, Phylum)
# Set column order.
col_order <- c("Identifier", "Species", "Kingdom", "Phylum",
"Hotspot1", "Hotspot2", "GapsHotspot1", "GapsHotspot2",
"HS1_in_oPools", "HS2_in_oPools")
# Reorganize column order.
dataframe <- dataframe[, col_order]
dataframe
}
# Testing
TableauFKS1 <- AddTaxonomy(TableauFKS1$Species, TableauFKS1)
TableauFKS2 <- AddTaxonomy(TableauFKS2$Species, TableauFKS2)
View(TaxoTree)
## Bar Plots
# For FKS1 Hotspot1
ggplot(TableauFKS1, aes(x = Hotspot1)) + geom_bar(fill = "orange2") +
theme(axis.text.x = element_text(angle = 90)) + ggtitle("Count FKS1 Hotspot 1 sequences")
## Import libraries
library(ggplot2)
library(UpSetR)
################################################################################
## Bar Plots
# For FKS1 Hotspot1
ggplot(TableauFKS1, aes(x = Hotspot1)) + geom_bar(fill = "orange2") +
theme(axis.text.x = element_text(angle = 90)) + ggtitle("Count FKS1 Hotspot 1 sequences")
# For FKS1 Hotspot2
ggplot(TableauFKS1, aes(x = Hotspot2)) + geom_bar(fill = "orange2") +
theme(axis.text.x = element_text(angle = 90)) + ggtitle("Count FKS1 Hotspot 2 sequences")
# For FKS2 Hotspot1
ggplot(TableauFKS2, aes(x = Hotspot1)) + geom_bar(fill = "green3") +
theme(axis.text.x = element_text(angle = 90)) + ggtitle("Count FKS2 Hotspot 1 sequences")
# For FKS2 Hotspot2
ggplot(TableauFKS2, aes(x = Hotspot2)) + geom_bar(fill = "green3") +
theme(axis.text.x = element_text(angle = 90)) + ggtitle("Count FKS2 Hotspot 2 sequences")
